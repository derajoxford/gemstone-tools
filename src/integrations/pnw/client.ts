// src/integrations/pnw/client.ts
//
// Minimal Politics & War GraphQL client (Node https).
// Auth: append ?api_key=KEY to the GraphQL endpoint.
//
// Docs: https://api.politicsandwar.com/graphql-playground (play w/ schema)
// Notes: 'alliances.bankrecs' returns last 14 days. Bankrec has `tax_id`.
// We filter client-side by id > lastSeenId because args vary by field.
//
// Avoids fetch() typings by using https from Node.

import https from "node:https";

export const PNW_GRAPHQL_HOST = process.env.PNW_GRAPHQL_HOST || "api.politicsandwar.com";
export const PNW_GRAPHQL_PATH = "/graphql";

export type PnwBankrec = {
  id: number;
  date: string;
  note: string | null;
  banker_id: number | null;
  // tax_id is present when a record is generated by game taxation
  tax_id: number | null;
  // Resource amounts (0 when not involved)
  money: number;
  food: number;
  munitions: number;
  gasoline: number;
  aluminum: number;
  steel: number;
  coal: number;
  oil: number;
  uranium: number;
  iron: number;
  bauxite: number;
  lead: number;
};

type GraphQLResponse<T> = {
  data?: T;
  errors?: { message: string }[];
};

function postGraphQL<T>(apiKey: string, body: { query: string; variables?: any }): Promise<T> {
  return new Promise((resolve, reject) => {
    const options: https.RequestOptions = {
      host: PNW_GRAPHQL_HOST,
      path: `${PNW_GRAPHQL_PATH}?api_key=${encodeURIComponent(apiKey)}`,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
    };

    const req = https.request(options, (res) => {
      let data = "";
      res.on("data", (chunk) => (data += chunk));
      res.on("end", () => {
        try {
          const parsed = JSON.parse(data) as GraphQLResponse<T>;
          if (parsed.errors?.length) {
            reject(new Error(parsed.errors.map((e) => e.message).join("; ")));
            return;
          }
          if (!parsed.data) {
            reject(new Error("Empty GraphQL response"));
            return;
          }
          resolve(parsed.data);
        } catch (err) {
          reject(err);
        }
      });
    });

    req.on("error", (err) => reject(err));
    req.write(JSON.stringify(body));
    req.end();
  });
}

/**
 * Fetch recent bankrecs for an alliance (last 14 days window).
 * We intentionally return **all** recent records and let callers filter by id/date.
 */
export async function fetchAllianceBankrecs(apiKey: string, allianceId: number): Promise<PnwBankrec[]> {
  const query = `
    query GetAllianceBankrecs($ids: [Int!]) {
      alliances(id: $ids) {
        id
        bankrecs {
          id
          date
          note
          banker_id
          tax_id
          money
          food
          munitions
          gasoline
          aluminum
          steel
          coal
          oil
          uranium
          iron
          bauxite
          lead
        }
      }
    }
  `;

  type Q = { alliances: { id: number; bankrecs: PnwBankrec[] }[] };
  const data = await postGraphQL<Q>(apiKey, { query, variables: { ids: [allianceId] } });

  const alliance = data.alliances?.[0];
  if (!alliance) return [];
  // Sort ascending by id to make "cursoring" simple for callers.
  return [...(alliance.bankrecs || [])].sort((a, b) => a.id - b.id);
}
