// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WithdrawStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
  CANCELED
}

model Alliance {
  id              Int        @id
  guildId         String?
  name            String?
  reviewChannelId String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  lastBankrecId   Int?

  keys            AllianceKey[]
  members         Member[]
  bankrecs        Bankrec[]
  treasury        AllianceTreasury?
}

model AllianceKey {
  id               Int      @id @default(autoincrement())
  allianceId       Int
  encryptedApiKey  Bytes
  encryptedBotKey  Bytes?
  nonceApi         Bytes
  nonceBot         Bytes?
  addedBy          String
  createdAt        DateTime @default(now())
  alliance         Alliance @relation(fields: [allianceId], references: [id])
}

model Member {
  id          Int      @id @default(autoincrement())
  allianceId  Int
  discordId   String
  nationId    Int
  nationName  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  balance     Safekeeping?
  alliance    Alliance @relation(fields: [allianceId], references: [id])
  safeTxns    SafeTxn[]        // <â€” back-reference for SafeTxn.member

  @@unique([allianceId, discordId])
}

model Safekeeping {
  id         Int      @id @default(autoincrement())
  memberId   Int      @unique
  money      Decimal  @default(0)
  food       Decimal  @default(0)
  coal       Decimal  @default(0)
  oil        Decimal  @default(0)
  uranium    Decimal  @default(0)
  lead       Decimal  @default(0)
  iron       Decimal  @default(0)
  bauxite    Decimal  @default(0)
  gasoline   Decimal  @default(0)
  munitions  Decimal  @default(0)
  steel      Decimal  @default(0)
  aluminum   Decimal  @default(0)
  updatedAt  DateTime @updatedAt
  member     Member   @relation(fields: [memberId], references: [id])
}

model Bankrec {
  id           Int      @id
  allianceId   Int
  date         DateTime
  note         String?
  senderType   Int
  senderId     Int
  receiverType Int
  receiverId   Int
  money        Decimal  @default(0)
  food         Decimal  @default(0)
  coal         Decimal  @default(0)
  oil          Decimal  @default(0)
  uranium      Decimal  @default(0)
  lead         Decimal  @default(0)
  iron         Decimal  @default(0)
  bauxite      Decimal  @default(0)
  gasoline     Decimal  @default(0)
  munitions    Decimal  @default(0)
  steel        Decimal  @default(0)
  aluminum     Decimal  @default(0)

  alliance     Alliance @relation(fields: [allianceId], references: [id])
}

model WithdrawalRequest {
  id          String          @id @default(uuid())
  allianceId  Int
  memberId    Int
  status      WithdrawStatus  @default(PENDING)
  payload     Json
  createdBy   String
  reviewerId  String?
  bankrecPaid Int?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model AllianceTreasury {
  allianceId Int       @id
  balances   Json      @default("{}")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  alliance   Alliance  @relation(fields: [allianceId], references: [id])
}

//
// Legacy ignored tables
//
model Setting {
  id Int @id @default(autoincrement())
  @@ignore
}

model AllianceConfig {
  id Int @id @default(autoincrement())
  @@ignore
}

//
// Alliance banking cache
//
model AllianceBankrec {
  id                   String   @id
  date                 DateTime
  note                 String
  tax_id               String
  sender_type          Int
  receiver_type        Int
  sender_id            String
  receiver_id          String
  alliance_id_derived  Int
  is_tax_guess         Boolean  @default(false)
  is_ignored           Boolean  @default(false)
  created_at           DateTime @default(now())

  @@index([alliance_id_derived, date], map: "idx_alliance_bankrec_aid_date")
  @@map("alliance_bankrec")
}

model AllianceApiKey {
  allianceId Int      @id
  apiKey     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("alliance_api_keys")
}

model AllianceBankCursor {
  allianceId Int
  lastSeenId String
  updatedAt  DateTime @updatedAt

  @@id([allianceId])
  @@map("alliance_bank_cursors")
}

model AllianceTaxCursor {
  allianceId Int
  lastSeenId String
  updatedAt  DateTime @updatedAt

  @@id([allianceId])
  @@map("alliance_tax_cursors")
}

// --- Safekeeping transaction audit trail ---
enum SafeTxnType {
  MANUAL_ADJUST
  AUTO_CREDIT
  WITHDRAWAL
}

model SafeTxn {
  id             Int         @id @default(autoincrement())
  memberId       Int
  member         Member      @relation(fields: [memberId], references: [id], onDelete: Cascade)

  resource       String      // e.g. "money", "steel", etc.
  amount         Decimal     @db.Decimal(20,4)

  type           SafeTxnType
  actorDiscordId String?     @db.VarChar(32)
  reason         String?     @db.Text

  createdAt      DateTime    @default(now())

  @@index([memberId, createdAt])
}
